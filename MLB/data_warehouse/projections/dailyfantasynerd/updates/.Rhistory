# remove team name from player name
hist_fpts_mat[,1] <- str_split_fixed(hist_fpts_mat[,1], "_", 2)[,1]
# match player in output.df to hist_fpts_mat. compute mean and std dev
for (k in 1:length(lineup)) {
temp_match <- hist_fpts_mat[,1]==output.df$Player[k]
if (length(which(temp_match)) == 1) {
temp_fpts <- hist_fpts_mat[temp_match,][-1] # remove first column element (player sname)
} else if (length(which(temp_match)) > 1) {
temp_fpts <- hist_fpts_mat[temp_match,][1,-1] # use first index match
} else {
temp_fpts <- NA
}
output.df$Avg_Hist_Fpts[k] <- mean(as.numeric(temp_fpts), na.rm = T)
output.df$Sd_Hist_Fpts[k] <- sd(as.numeric(temp_fpts), na.rm = T)
output.df$Num_Games[k] <- sum(!is.na(temp_fpts))
}
return(output.df)
}
# set formulation
form_name <- "formulations.formulation5_covar_stacksize_5_overlap_5_lineups_150_lambda_0.001_exposure_P0.8_exposure_B10.3_exposure_B20.4_exposure_B30.6_exposure_C0.3_exposure_SS0.5_exposure_OF0.6_covar_chg75p_exp(spike)"
# load baseline contest info
baseline_contests <- read.csv(file = "MLB/optimizationCode/baseline_contests.csv", stringsAsFactors = F, header = T)
# load PnL
daily_pnl <- read.csv(file = paste0("MLB/resultsAnalysis/analyze_generated_lineups/", form_name, "/daily_pnl.csv"), header = T, stringsAsFactors = F)
# initialize
temp_df <- as.data.frame(matrix(data = NA, nrow = 150, ncol = 2, dimnames = list(NULL, c("Total_Fpts","output.df"))))
ind_start <- which(baseline_contests$Date == "2017-05-28")
ind_end <- which(baseline_contests$Date == "2017-07-14")
# iterate through contests
for (i in ind_start:ind_end) {
cat("***********************************************************************************************\n")
cat(paste0("Contest ", i, ": ", baseline_contests$Date[i], " ", baseline_contests$Contest_names[i]))
cat("\n***********************************************************************************************\n")
# print PnL
print(paste0("PnL: ", daily_pnl$PnL[daily_pnl$Date==baseline_contests$Date[i]]))
# loop through the 150 lineups
for (j in 1:150) {
output <- lineupFpts(contest_date = baseline_contests$Date[i], contest_name = baseline_contests$Contest_names[i], formulation_name = "formulations.formulation5_covar_stacksize_5_overlap_5_lineups_150_lambda_0.001_exposure_P0.8_exposure_B10.3_exposure_B20.4_exposure_B30.6_exposure_C0.3_exposure_SS0.5_exposure_OF0.6_covar_chg75p_exp(spike)", lineup_index = j)
temp_df$Total_Fpts[j] <- sum(output$Fpts)
temp_df$output.df[j] <- list(output)
}
# sort in decreasing order of total fpts
temp_df <- temp_df[order(temp_df$Total_Fpts, decreasing = T),]
# print the 150 lineups
for (k in c(1:150)) {
cat("\n")
print(paste0("Total fpts: ", temp_df$Total_Fpts[k], " (", k, ")"))
print(temp_df$output.df[[k]])
}
cat("\n\n\n")
}
i
j
output <- lineupFpts(contest_date = baseline_contests$Date[i], contest_name = baseline_contests$Contest_names[i], formulation_name = "formulations.formulation5_covar_stacksize_5_overlap_5_lineups_150_lambda_0.001_exposure_P0.8_exposure_B10.3_exposure_B20.4_exposure_B30.6_exposure_C0.3_exposure_SS0.5_exposure_OF0.6_covar_chg75p_exp(spike)", lineup_index = j)
contest_date = baseline_contests$Date[i]
contest_name = baseline_contests$Contest_names[i]
formulation_name = "formulations.formulation5_covar_stacksize_5_overlap_5_lineups_150_lambda_0.001_exposure_P0.8_exposure_B10.3_exposure_B20.4_exposure_B30.6_exposure_C0.3_exposure_SS0.5_exposure_OF0.6_covar_chg75p_exp(spike)"
lineup_index = j
require(stringr)
source("MLB/functions_global/cleanPlayerNames.R")
lineup_file <- read.csv(file = paste0("MLB/data_warehouse/", contest_date, "/", contest_name, "/lineups/", formulation_name, ".csv"), stringsAsFactors = F, header = T)
lineup <- lineup_file[lineup_index,]
output.df <- as.data.frame(matrix(data = NA, nrow = length(lineup), ncol = 13, dimnames = list(NULL, c("Player", "Team", "Pos", "Salary", "Fpts", "Avg_Hist_Fpts", "Sd_Hist_Fpts", "Num_Games", "Avg_Innings", "WHIP", "Order", "wOBA", "ISO"))))
output.df$Player <- as.character(t(lineup))
temp_fc_results <- read.csv(paste0("MLB/data_warehouse/", baseline_contests$Date[i], "/player_results.csv"), stringsAsFactors = F, header = T)
temp_fc_results$Player <- cleanPlayerNames(temp_fc_results$Player)
for (k in 1:length(lineup)) {
temp_match <- temp_fc_results$Player==output.df$Player[k]
if (length(which(temp_match)) == 1) {
output.df$Team[k] <- temp_fc_results$Team[temp_match]
output.df$Pos[k] <- temp_fc_results$Pos[temp_match]
output.df$Salary[k] <- temp_fc_results$Salary[temp_match]
output.df$Fpts[k] <- temp_fc_results$Actual.Score[temp_match]
output.df$Avg_Innings[k] <- temp_fc_results$Avg_Innings[temp_match]
output.df$WHIP[k] <- temp_fc_results$WHIP[temp_match]
output.df$Order[k] <- temp_fc_results$Order[temp_match]
output.df$wOBA[k] <- temp_fc_results$wOBA[temp_match]
output.df$ISO[k] <- temp_fc_results$ISO[temp_match]
} else if (length(which(temp_match)) > 1) {
print(paste0("Warning: ", output.df$Player[k], " fpts score may be incorrect b/c same name on different teams."))
output.df$Team[k] <- temp_fc_results$Team[temp_match][1] # use first index match
output.df$Pos[k] <- temp_fc_results$Pos[temp_match][1]
output.df$Salary[k] <- temp_fc_results$Salary[temp_match][1]
output.df$Fpts[k] <- temp_fc_results$Actual.Score[temp_match][1]
output.df$Avg_Innings[k] <- temp_fc_results$Avg_Innings[temp_match][1]
output.df$WHIP[k] <- temp_fc_results$WHIP[temp_match][1]
output.df$Order[k] <- temp_fc_results$Order[temp_match][1]
output.df$wOBA[k] <- temp_fc_results$wOBA[temp_match][1]
output.df$ISO[k] <- temp_fc_results$ISO[temp_match][1]
} else {
output.df$Team[k] <- NA
output.df$Pos[k] <- NA
output.df$Salary[k] <- NA
output.df$Fpts[k] <- NA
output.df$Avg_Innings[k] <- NA
output.df$WHIP[k] <- NA
output.df$Order[k] <- NA
output.df$wOBA[k] <- NA
output.df$ISO[k] <- NA
}
}
k
temp_match <- temp_fc_results$Player==output.df$Player[k]
temp_match
length(which(temp_match)) == 1
output.df$Team[k] <- temp_fc_results$Team[temp_match]
output.df$Pos[k] <- temp_fc_results$Pos[temp_match]
output.df$Salary[k] <- temp_fc_results$Salary[temp_match]
output.df$Fpts[k] <- temp_fc_results$Actual.Score[temp_match]
output.df$Avg_Innings[k] <- temp_fc_results$Avg_Innings[temp_match]
temp_fc_results$Avg_Innings[temp_match]
temp_fc_results$Avg_Innings
temp_fc_results <- read.csv(paste0("MLB/data_warehouse/", baseline_contests$Date[i], "/player_results.csv"), stringsAsFactors = F, header = T)
temp_fc_results$Player <- cleanPlayerNames(temp_fc_results$Player)
for (k in 1:length(lineup)) {
temp_match <- temp_fc_results$Player==output.df$Player[k]
if (length(which(temp_match)) == 1) {
output.df$Team[k] <- temp_fc_results$Team[temp_match]
output.df$Pos[k] <- temp_fc_results$Pos[temp_match]
output.df$Salary[k] <- temp_fc_results$Salary[temp_match]
output.df$Fpts[k] <- temp_fc_results$Actual.Score[temp_match]
output.df$Avg_Innings[k] <- temp_fc_results$Avg_innings[temp_match]
output.df$WHIP[k] <- temp_fc_results$WHIP[temp_match]
output.df$Order[k] <- temp_fc_results$Order[temp_match]
output.df$wOBA[k] <- temp_fc_results$wOBA[temp_match]
output.df$ISO[k] <- temp_fc_results$ISO[temp_match]
} else if (length(which(temp_match)) > 1) {
print(paste0("Warning: ", output.df$Player[k], " fpts score may be incorrect b/c same name on different teams."))
output.df$Team[k] <- temp_fc_results$Team[temp_match][1] # use first index match
output.df$Pos[k] <- temp_fc_results$Pos[temp_match][1]
output.df$Salary[k] <- temp_fc_results$Salary[temp_match][1]
output.df$Fpts[k] <- temp_fc_results$Actual.Score[temp_match][1]
output.df$Avg_Innings[k] <- temp_fc_results$Avg_innings[temp_match][1]
output.df$WHIP[k] <- temp_fc_results$WHIP[temp_match][1]
output.df$Order[k] <- temp_fc_results$Order[temp_match][1]
output.df$wOBA[k] <- temp_fc_results$wOBA[temp_match][1]
output.df$ISO[k] <- temp_fc_results$ISO[temp_match][1]
} else {
output.df$Team[k] <- NA
output.df$Pos[k] <- NA
output.df$Salary[k] <- NA
output.df$Fpts[k] <- NA
output.df$Avg_innings[k] <- NA
output.df$WHIP[k] <- NA
output.df$Order[k] <- NA
output.df$wOBA[k] <- NA
output.df$ISO[k] <- NA
}
}
temp_fc_results$Avg_innings[temp_match]
temp_fc_results
if(file.exists("~/Projects/DFS/")) {
setwd("~/Projects/DFS/")
} else {
setwd("~/Documents/DFS/")
}
####### DESCRIPTION #######
# Function that takes a lineup as input and returns the fpts, mean historical fpts,
# and sd historical fpts of each player in the lineup as output.
lineupFpts <- function(contest_date, contest_name, formulation_name, lineup_index) {
# import libraries
require(stringr)
# import functions
source("MLB/functions_global/cleanPlayerNames.R")
# load lineup file for input contest
lineup_file <- read.csv(file = paste0("MLB/data_warehouse/", contest_date, "/", contest_name, "/lineups/", formulation_name, ".csv"), stringsAsFactors = F, header = T)
# subset single lineup in lineup file (lineup_index)
lineup <- lineup_file[lineup_index,]
# initialize output df
output.df <- as.data.frame(matrix(data = NA, nrow = length(lineup), ncol = 13, dimnames = list(NULL, c("Player", "Team", "Pos", "Salary", "Fpts", "Avg_Hist_Fpts", "Sd_Hist_Fpts", "Num_Games", "Avg_Innings", "WHIP", "Order", "wOBA", "ISO"))))
output.df$Player <- as.character(t(lineup))
# load FC results to fill Fpts column in output.df
temp_fc_results <- read.csv(paste0("MLB/data_warehouse/", baseline_contests$Date[i], "/player_results.csv"), stringsAsFactors = F, header = T)
temp_fc_results$Player <- cleanPlayerNames(temp_fc_results$Player)
# match player in output.df to FC results
for (k in 1:length(lineup)) {
temp_match <- temp_fc_results$Player==output.df$Player[k]
if (length(which(temp_match)) == 1) {
output.df$Team[k] <- temp_fc_results$Team[temp_match]
output.df$Pos[k] <- temp_fc_results$Pos[temp_match]
output.df$Salary[k] <- temp_fc_results$Salary[temp_match]
output.df$Fpts[k] <- temp_fc_results$Actual.Score[temp_match]
output.df$Avg_Innings[k] <- temp_fc_results$Avg.innings[temp_match]
output.df$WHIP[k] <- temp_fc_results$WHIP[temp_match]
output.df$Order[k] <- temp_fc_results$Order[temp_match]
output.df$wOBA[k] <- temp_fc_results$wOBA[temp_match]
output.df$ISO[k] <- temp_fc_results$ISO[temp_match]
} else if (length(which(temp_match)) > 1) {
print(paste0("Warning: ", output.df$Player[k], " fpts score may be incorrect b/c same name on different teams."))
output.df$Team[k] <- temp_fc_results$Team[temp_match][1] # use first index match
output.df$Pos[k] <- temp_fc_results$Pos[temp_match][1]
output.df$Salary[k] <- temp_fc_results$Salary[temp_match][1]
output.df$Fpts[k] <- temp_fc_results$Actual.Score[temp_match][1]
output.df$Avg_Innings[k] <- temp_fc_results$Avg.innings[temp_match][1]
output.df$WHIP[k] <- temp_fc_results$WHIP[temp_match][1]
output.df$Order[k] <- temp_fc_results$Order[temp_match][1]
output.df$wOBA[k] <- temp_fc_results$wOBA[temp_match][1]
output.df$ISO[k] <- temp_fc_results$ISO[temp_match][1]
} else {
output.df$Team[k] <- NA
output.df$Pos[k] <- NA
output.df$Salary[k] <- NA
output.df$Fpts[k] <- NA
output.df$Avg.innings[k] <- NA
output.df$WHIP[k] <- NA
output.df$Order[k] <- NA
output.df$wOBA[k] <- NA
output.df$ISO[k] <- NA
}
}
# load hist_fpts_mat (batters) to fill Avg_Hist_Fpts column in output.df
hist_fpts_mat <- read.csv(file = paste0("MLB/data_warehouse/", baseline_contests$Date[i], "/hist_fpts_mat.csv"), stringsAsFactors = F, header = T, check.names = F)
# remove team name from player name
hist_fpts_mat[,1] <- str_split_fixed(hist_fpts_mat[,1], "_", 2)[,1]
# match player in output.df to hist_fpts_mat. compute mean and std dev
for (k in 1:length(lineup)) {
temp_match <- hist_fpts_mat[,1]==output.df$Player[k]
if (length(which(temp_match)) == 1) {
temp_fpts <- hist_fpts_mat[temp_match,][-1] # remove first column element (player sname)
} else if (length(which(temp_match)) > 1) {
temp_fpts <- hist_fpts_mat[temp_match,][1,-1] # use first index match
} else {
temp_fpts <- NA
}
output.df$Avg_Hist_Fpts[k] <- mean(as.numeric(temp_fpts), na.rm = T)
output.df$Sd_Hist_Fpts[k] <- sd(as.numeric(temp_fpts), na.rm = T)
output.df$Num_Games[k] <- sum(!is.na(temp_fpts))
}
return(output.df)
}
# set formulation
form_name <- "formulations.formulation5_covar_stacksize_5_overlap_5_lineups_150_lambda_0.001_exposure_P0.8_exposure_B10.3_exposure_B20.4_exposure_B30.6_exposure_C0.3_exposure_SS0.5_exposure_OF0.6_covar_chg75p_exp(spike)"
# load baseline contest info
baseline_contests <- read.csv(file = "MLB/optimizationCode/baseline_contests.csv", stringsAsFactors = F, header = T)
# load PnL
daily_pnl <- read.csv(file = paste0("MLB/resultsAnalysis/analyze_generated_lineups/", form_name, "/daily_pnl.csv"), header = T, stringsAsFactors = F)
# initialize
temp_df <- as.data.frame(matrix(data = NA, nrow = 150, ncol = 2, dimnames = list(NULL, c("Total_Fpts","output.df"))))
ind_start <- which(baseline_contests$Date == "2017-05-28")
ind_end <- which(baseline_contests$Date == "2017-07-14")
# iterate through contests
for (i in ind_start:ind_end) {
cat("***********************************************************************************************\n")
cat(paste0("Contest ", i, ": ", baseline_contests$Date[i], " ", baseline_contests$Contest_names[i]))
cat("\n***********************************************************************************************\n")
# print PnL
print(paste0("PnL: ", daily_pnl$PnL[daily_pnl$Date==baseline_contests$Date[i]]))
# loop through the 150 lineups
for (j in 1:150) {
output <- lineupFpts(contest_date = baseline_contests$Date[i], contest_name = baseline_contests$Contest_names[i], formulation_name = "formulations.formulation5_covar_stacksize_5_overlap_5_lineups_150_lambda_0.001_exposure_P0.8_exposure_B10.3_exposure_B20.4_exposure_B30.6_exposure_C0.3_exposure_SS0.5_exposure_OF0.6_covar_chg75p_exp(spike)", lineup_index = j)
temp_df$Total_Fpts[j] <- sum(output$Fpts)
temp_df$output.df[j] <- list(output)
}
# sort in decreasing order of total fpts
temp_df <- temp_df[order(temp_df$Total_Fpts, decreasing = T),]
# print the 150 lineups
for (k in c(1:150)) {
cat("\n")
print(paste0("Total fpts: ", temp_df$Total_Fpts[k], " (", k, ")"))
print(temp_df$output.df[[k]])
}
cat("\n\n\n")
}
j
i
contest_date = baseline_contests$Date[i]
contest_name = baseline_contests$Contest_names[i]
formulation_name = "formulations.formulation5_covar_stacksize_5_overlap_5_lineups_150_lambda_0.001_exposure_P0.8_exposure_B10.3_exposure_B20.4_exposure_B30.6_exposure_C0.3_exposure_SS0.5_exposure_OF0.6_covar_chg75p_exp(spike)"
lineup_index = j
require(stringr)
source("MLB/functions_global/cleanPlayerNames.R")
lineup_file <- read.csv(file = paste0("MLB/data_warehouse/", contest_date, "/", contest_name, "/lineups/", formulation_name, ".csv"), stringsAsFactors = F, header = T)
lineup <- lineup_file[lineup_index,]
output.df <- as.data.frame(matrix(data = NA, nrow = length(lineup), ncol = 13, dimnames = list(NULL, c("Player", "Team", "Pos", "Salary", "Fpts", "Avg_Hist_Fpts", "Sd_Hist_Fpts", "Num_Games", "Avg_Innings", "WHIP", "Order", "wOBA", "ISO"))))
output.df$Player <- as.character(t(lineup))
temp_fc_results <- read.csv(paste0("MLB/data_warehouse/", baseline_contests$Date[i], "/player_results.csv"), stringsAsFactors = F, header = T)
temp_fc_results$Player <- cleanPlayerNames(temp_fc_results$Player)
for (k in 1:length(lineup)) {
temp_match <- temp_fc_results$Player==output.df$Player[k]
if (length(which(temp_match)) == 1) {
output.df$Team[k] <- temp_fc_results$Team[temp_match]
output.df$Pos[k] <- temp_fc_results$Pos[temp_match]
output.df$Salary[k] <- temp_fc_results$Salary[temp_match]
output.df$Fpts[k] <- temp_fc_results$Actual.Score[temp_match]
output.df$Avg_Innings[k] <- temp_fc_results$Avg.innings[temp_match]
output.df$WHIP[k] <- temp_fc_results$WHIP[temp_match]
output.df$Order[k] <- temp_fc_results$Order[temp_match]
output.df$wOBA[k] <- temp_fc_results$wOBA[temp_match]
output.df$ISO[k] <- temp_fc_results$ISO[temp_match]
} else if (length(which(temp_match)) > 1) {
print(paste0("Warning: ", output.df$Player[k], " fpts score may be incorrect b/c same name on different teams."))
output.df$Team[k] <- temp_fc_results$Team[temp_match][1] # use first index match
output.df$Pos[k] <- temp_fc_results$Pos[temp_match][1]
output.df$Salary[k] <- temp_fc_results$Salary[temp_match][1]
output.df$Fpts[k] <- temp_fc_results$Actual.Score[temp_match][1]
output.df$Avg_Innings[k] <- temp_fc_results$Avg.innings[temp_match][1]
output.df$WHIP[k] <- temp_fc_results$WHIP[temp_match][1]
output.df$Order[k] <- temp_fc_results$Order[temp_match][1]
output.df$wOBA[k] <- temp_fc_results$wOBA[temp_match][1]
output.df$ISO[k] <- temp_fc_results$ISO[temp_match][1]
} else {
output.df$Team[k] <- NA
output.df$Pos[k] <- NA
output.df$Salary[k] <- NA
output.df$Fpts[k] <- NA
output.df$Avg.innings[k] <- NA
output.df$WHIP[k] <- NA
output.df$Order[k] <- NA
output.df$wOBA[k] <- NA
output.df$ISO[k] <- NA
}
}
k
temp_match <- temp_fc_results$Player==output.df$Player[k]
temp_match
length(which(temp_match)) > 1
output.df$Team[k] <- NA
output.df$Pos[k] <- NA
output.df$Salary[k] <- NA
output.df$Fpts[k] <- NA
output.df$Avg.innings[k] <- NA
output.df$WHIP[k] <- NA
output.df$Order[k] <- NA
output.df$wOBA[k] <- NA
output.df$ISO[k] <- NA
View(baseline_contests)
if(file.exists("~/Projects/DFS/")) {
setwd("~/Projects/DFS/")
} else {
setwd("~/Documents/DFS/")
}
knitr::opts_chunk$set(echo = TRUE)
if(file.exists("~/Projects/DFS/")) {
opts_knit$set(root.dir = "~/Projects/DFS/")
} else {
opts_knit$set(root.dir = "~/Documents/DFS/")
}
require("knitr")
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
if(file.exists("~/Projects/DFS/")) {
opts_knit$set(root.dir = "~/Projects/DFS/")
} else {
opts_knit$set(root.dir = "~/Documents/DFS/")
}
require("knitr")
knitr::opts_chunk$set(echo = TRUE)
if(file.exists("~/Projects/DFS/")) {
opts_knit$set(root.dir = "~/Projects/DFS/")
} else {
opts_knit$set(root.dir = "~/Documents/DFS/")
}
list.files(pattern="MLB/data_warehouse/projections/dailyfantasynerd/updates/*.csv")
if(file.exists("~/Projects/DFS/")) {
setwd("~/Projects/DFS/")
} else {
setwd("~/Documents/DFS/")
}
list.files(pattern="MLB/data_warehouse/projections/dailyfantasynerd/updates/*.csv")
list.files(pattern="MLB/data_warehouse/projections/dailyfantasynerd/updates/*")
list.files(pattern="*.csv")
if(file.exists("~/Projects/DFS/")) {
setwd("~/Projects/DFS/")
} else {
setwd("~/Documents/DFS/")
}
setwd("~/Documents/DFS/MLB/data_warehouse/projections/dailyfantasynerd/updates/")
list.files(pattern="*.csv")
if(file.exists("~/Projects/DFS/")) {
setwd("~/Projects/DFS/MLB/data_warehouse/projections/dailyfantasynerd/updates/")
} else {
setwd("~/Documents/DFS/MLB/data_warehouse/projections/dailyfantasynerd/updates/")
}
list.files(pattern="*.csv")
list.files(pattern="*.csv")
if(file.exists("~/Projects/DFS/")) {
setwd("~/Projects/DFS/MLB/data_warehouse/projections/dailyfantasynerd/updates/")
} else {
setwd("~/Documents/DFS/MLB/data_warehouse/projections/dailyfantasynerd/updates/")
}
list.files(pattern="*.csv")
if(file.exists("~/Projects/DFS/")) {
setwd("~/Projects/DFS/MLB/data_warehouse/projections/dailyfantasynerd/updates/")
} else {
setwd("~/Documents/DFS/MLB/data_warehouse/projections/dailyfantasynerd/updates/")
}
list.files(pattern="*hitters_*.csv")
if(file.exists("~/Projects/DFS/")) {
setwd("~/Projects/DFS/MLB/data_warehouse/projections/dailyfantasynerd/updates/")
} else {
setwd("~/Documents/DFS/MLB/data_warehouse/projections/dailyfantasynerd/updates/")
}
list.files(pattern="*hitters*.csv")
help(list.files)
list.files(path = "MLB/data_warehouse/projections/dailyfantasynerd/updates/")
list.files(path = "MLB/data_warehouse/projections/dailyfantasynerd/updates/", pattern = "*hitters*")
file_paths <- list.files(path = "MLB/data_warehouse/projections/dailyfantasynerd/updates/", pattern = "*hitters*")
length(file_paths)
read.csv(file = file_paths[1])
read.csv(file = paste0("MLB/data_warehouse/projections/dailyfantasynerd/updates/", file_paths[1]))
i = 1
temp_hitters <- read.csv(file = paste0("MLB/data_warehouse/projections/dailyfantasynerd/updates/", file_paths[i]), stringsAsFactors = F, header = T)
file_paths <- list.files(path = "MLB/data_warehouse/projections/dailyfantasynerd/updates/", pattern = "*hitters*")
for (i in 1:length(file_paths)) {
temp_hitters <- read.csv(file = paste0("MLB/data_warehouse/projections/dailyfantasynerd/updates/", file_paths[i]), stringsAsFactors = F, header = T)
}
View(temp_hitters)
temp_hitters <- temp_hitters[temp_hitters$Pos=="C",]
file_paths <- list.files(path = "MLB/data_warehouse/projections/dailyfantasynerd/updates/", pattern = "*hitters*")
# initialize df for storing all catchers
catchers_df <- NULL
# iterate through all hitter csvs and append to catchers_df
for (i in 1:3) {
temp_hitters <- read.csv(file = paste0("MLB/data_warehouse/projections/dailyfantasynerd/updates/", file_paths[i]), stringsAsFactors = F, header = T)
temp_hitters <- temp_hitters[temp_hitters$Pos=="C",]
catchers_df <- rbind(catchers_df, temp_hitters)
}
catchers_df
temp_hitters
ncol(catchers_df)
ncol(temp_hitters)
# list all hitter csvs in dfn updates folder
file_paths <- list.files(path = "MLB/data_warehouse/projections/dailyfantasynerd/updates/", pattern = "*hitters*")
# initialize df for storing all catchers
catchers_df <- NULL
# iterate through all hitter csvs and append to catchers_df
for (i in 1:3) {
temp_hitters <- read.csv(file = paste0("MLB/data_warehouse/projections/dailyfantasynerd/updates/", file_paths[i]), stringsAsFactors = F, header = T)
temp_hitters <- temp_hitters[temp_hitters$Pos=="C", c("Player.Name", "Pos", "Team", "Salary", "Actual.FP")]
catchers_df <- rbind(catchers_df, temp_hitters)
}
View(catchers_df)
length(file_paths)
# list all hitter csvs in dfn updates folder
file_paths <- list.files(path = "MLB/data_warehouse/projections/dailyfantasynerd/updates/", pattern = "*hitters*")
# initialize df for storing all catchers
catchers_df <- NULL
# iterate through all hitter csvs and append to catchers_df
for (i in 1:length(file_paths)) {
temp_hitters <- read.csv(file = paste0("MLB/data_warehouse/projections/dailyfantasynerd/updates/", file_paths[i]), stringsAsFactors = F, header = T)
temp_hitters <- temp_hitters[temp_hitters$Pos=="C", c("Player.Name", "Pos", "Team", "Salary", "Actual.FP")]
catchers_df <- rbind(catchers_df, temp_hitters)
}
View(catchers_df)
sum(is.na(catchers_df$Actual.FP))
cor(catchers_df$Salary, catchers_df$Actual.FP)
plot(catchers_df$Salary, catchers_df$Actual.FP)
# iterate through all hitter csvs and append to results_df
for (i in 1:length(file_paths)) {
temp_hitters <- read.csv(file = paste0("MLB/data_warehouse/projections/dailyfantasynerd/updates/", file_paths[i]), stringsAsFactors = F, header = T)
temp_hitters <- temp_hitters[, c("Player.Name", "Pos", "Team", "Salary", "Proj.FP" "Actual.FP")]
```{r catchers, echo=FALSE, comment=NA, message=FALSE}
file_paths <- list.files(path = "MLB/data_warehouse/projections/dailyfantasynerd/updates/", pattern = "*hitters*")
# initialize df for storing all results
results_df <- NULL
# iterate through all hitter csvs and append to results_df
for (i in 1:length(file_paths)) {
temp_hitters <- read.csv(file = paste0("MLB/data_warehouse/projections/dailyfantasynerd/updates/", file_paths[i]), stringsAsFactors = F, header = T)
temp_hitters <- temp_hitters[, c("Player.Name", "Pos", "Team", "Salary", "Proj.FP" "Actual.FP")]
file_paths <- list.files(path = "MLB/data_warehouse/projections/dailyfantasynerd/updates/", pattern = "*hitters*")
# initialize df for storing all results
results_df <- NULL
# iterate through all hitter csvs and append to results_df
for (i in 1:length(file_paths)) {
temp_hitters <- read.csv(file = paste0("MLB/data_warehouse/projections/dailyfantasynerd/updates/", file_paths[i]), stringsAsFactors = F, header = T)
temp_hitters <- temp_hitters[, c("Player.Name", "Pos", "Team", "Salary", "Proj.FP", "Actual.FP")]
results_df <- rbind(results_df, temp_hitters)
}
catchers_df <- results_df[results_df$Pos=="C",]
print(paste0("Correlation: ", cor(catchers_df$Salary, catchers_df$Actual.FP)))
plot(catchers_df$Salary, catchers_df$Actual.FP, xlab = "Salary", ylab = "Fantasy Points", main = "Catchers")
plot(catchers_df$Proj.FP, catchers_df$Actual.FP, xlab = "Projected Fantasy Points", ylab = "Fantasy Points", main = "Catchers")
cor(catchers_df$Proj.FP, catchers_df$Actual.FP)
View(results_df)
View(results_df)
help(Grep)
help(grep)
catchers_df <- results_df[results_df$Pos==grep(pattern = "*C*"),]
grep(pattern = "*C*")
catchers_df <- results_df[results_df$Pos=="*C*",]
View(catchers_df)
help(sub)
help(grepl)
grepl(pattern = "*C*")
results_df[, grepl(results_df$row, "C")]
results_df[, grepl("C", results_df$row)]
results_df
results_df[, grepl("C", results_df$row)]
results_df[grepl("C", results_df$row), ]
catchers_df <- results_df[grepl("C", results_df$Pos), ]
View(catchers_df)
catchers_df <- results_df[grepl("C", results_df$Pos), ]
print(paste0("Correlation: ", cor(catchers_df$Salary, catchers_df$Actual.FP)))
plot(catchers_df$Salary, catchers_df$Actual.FP, xlab = "Salary", ylab = "Fantasy Points", main = "Catchers")
cor(catchers_df$Proj.FP, catchers_df$Actual.FP)
B1_df <- results_df[grepl("1B", results_df$Pos), ]
View(B1_df)
position_df <- results_df[grepl("1B", results_df$Pos), ]
print(paste0("Correlation: ", cor(position_df$Salary, position_df$Actual.FP)))
plot(position_df$Salary, position_df$Actual.FP, xlab = "Salary", ylab = "Fantasy Points", main = "Catchers")
cor(position_df$Proj.FP, position_df$Actual.FP)
# subset
position_df <- results_df[grepl("2B", results_df$Pos), ]
# correlation between salary and fpts
print(paste0("Correlation (Salary, Actual Fpts): ", cor(position_df$Salary, position_df$Actual.FP)))
# plot
plot(position_df$Salary, position_df$Actual.FP, xlab = "Salary", ylab = "Fantasy Points", main = "2B")
# correlation between projected and actual fpts
print(paste0("Correlation (Proj, Actual Fpts)", cor(position_df$Proj.FP, position_df$Actual.FP)))
position_df <- results_df[grepl("2B", results_df$Pos), ]
print(paste0("Correlation (Salary, Actual Fpts): ", cor(position_df$Salary, position_df$Actual.FP)))
hist(position_df$Salary, position_df$Actual.FP, xlab = "Salary", ylab = "Fantasy Points", main = "Catchers")
